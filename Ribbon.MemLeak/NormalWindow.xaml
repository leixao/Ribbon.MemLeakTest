<Fluent:RibbonWindow  xmlns:Fluent="urn:fluent-ribbon" 
                      x:Class="Ribbon.MemLeak.NormalWindow"
                      xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                      xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                      xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
                      xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                      xmlns:local="clr-namespace:Ribbon.MemLeak"
                      mc:Ignorable="d"
                      Title="MemoryLeakWindow" Height="450" Width="800"
                      Loaded="RibbonWindow_Loaded">

    <Window.Resources>
        <RoutedCommand x:Key="TestCmd" />
    </Window.Resources>
    
    <Grid Background="Transparent" x:Name="RootGrid">

        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="*" />
        </Grid.RowDefinitions>

        <Fluent:Ribbon x:Name="Ribbon">
            <Fluent:RibbonTabItem>
                <Fluent:RibbonGroupBox>
                    <Fluent:Button Command="{StaticResource TestCmd}" >
                        <Fluent:Button.Template>
                            <ControlTemplate TargetType="{x:Type Fluent:Button}">
                                <Border x:Name="border"
                                        Height="Auto"
                                        HorizontalAlignment="{TemplateBinding HorizontalAlignment}"
                                        VerticalAlignment="{TemplateBinding VerticalAlignment}"
                                        Background="{TemplateBinding Background}"
                                        BorderBrush="{TemplateBinding BorderBrush}"
                                        BorderThickness="{TemplateBinding BorderThickness}">
                                    <StackPanel x:Name="stackPanel"
                                                Width="Auto"
                                                Margin="{TemplateBinding Padding}"
                                                Orientation="Vertical">
                                        
                                        <!--<Fluent:IconPresenter x:Name="iconImage"
                                                              Margin="0 2 0 0"
                                                              IconSize="{Binding Path=(Fluent:RibbonProperties.IconSize), RelativeSource={RelativeSource TemplatedParent}}"
                                                              LargeIcon="{Binding LargeIcon, RelativeSource={RelativeSource TemplatedParent}}"
                                                              MediumIcon="{Binding MediumIcon, RelativeSource={RelativeSource TemplatedParent}}"
                                                              SmallIcon="{Binding Icon, RelativeSource={RelativeSource TemplatedParent}}" />-->

                                        <Fluent:TwoLineLabel x:Name="controlLabel"
                                                             Margin="2 0 2 0"
                                                             HorizontalAlignment="Stretch"
                                                             VerticalAlignment="Center"
                                                             Text="{Binding Header, RelativeSource={RelativeSource TemplatedParent}}" />
                                    </StackPanel>
                                </Border>
                                <ControlTemplate.Triggers>
                                    <Trigger Property="Size" Value="Small">
                                        <Setter TargetName="controlLabel" Property="HasTwoLines" Value="False" />
                                        <Setter TargetName="controlLabel" Property="Margin" Value="2 0 2 0" />
                                        <Setter TargetName="controlLabel" Property="Visibility" Value="Collapsed" />
                                        <!--<Setter TargetName="iconImage" Property="Margin" Value="2 0 2 0" />-->
                                        <Setter TargetName="stackPanel" Property="Orientation" Value="Horizontal" />
                                    </Trigger>
                                    <Trigger Property="Size" Value="Middle">
                                        <Setter TargetName="border" Property="VerticalAlignment" Value="Stretch" />
                                        <Setter TargetName="controlLabel" Property="HasTwoLines" Value="False" />
                                        <Setter TargetName="controlLabel" Property="Margin" Value="2 0 2 0" />
                                        <Setter TargetName="controlLabel" Property="VerticalAlignment" Value="Center" />
                                        <!--<Setter TargetName="iconImage" Property="Margin" Value="2 0 2 0" />
                                        <Setter TargetName="iconImage" Property="VerticalAlignment" Value="Center" />-->
                                        <Setter TargetName="stackPanel" Property="Orientation" Value="Horizontal" />
                                        <Setter TargetName="stackPanel" Property="Width" Value="Auto" />
                                    </Trigger>

                                    <Trigger Property="IsPressed" Value="True">
                                        <Setter TargetName="border" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.Background}" />
                                        <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.BorderBrush}" />
                                    </Trigger>
                                    <Trigger Property="IsEnabled" Value="False">
                                        <Setter TargetName="controlLabel" Property="Opacity" Value="0.5" />
                                    </Trigger>
                                    <MultiTrigger>
                                        <MultiTrigger.Conditions>
                                            <Condition Property="IsMouseOver" Value="True" />
                                            <Condition Property="IsPressed" Value="False" />
                                            <Condition Property="IsEnabled" Value="True" />
                                        </MultiTrigger.Conditions>
                                        <Setter TargetName="border" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.Background}" />
                                        <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.BorderBrush}" />
                                    </MultiTrigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Fluent:Button.Template>
                    </Fluent:Button>
                </Fluent:RibbonGroupBox>
            </Fluent:RibbonTabItem>
        </Fluent:Ribbon>

    </Grid>
</Fluent:RibbonWindow>
